---
description: 
globs: 
alwaysApply: false
---
# Global Rules

## Rule Commands
These aliases should be recognized and executed automatically when typed in the chat. 
- When user types:
    - `ind` -> Run `tree /F /A` to index the project directory and follow [cursor_ignore_rules.mdc](mdc:.cursor/rules/cursor_ignore_rules.mdc)
    - `upd` -> update documents using [update_docs.mdc](mdc:.cursor/rules/update_docs.mdc)
    - `new` -> look in [new_proj.mdc](mdc:.cursor/rules/new_proj.mdc)

## Important Principles
- Do not ever delete any file.
- If a file is not needed, store it in the archive folder.
- When doing multiple things, do them one by one and ask me to accept.
- Follow the Single Responsibility principle.
- Follow the Separation of Concerns principle.
- Use commands that work with Windows.
- Use terminal commands over PowerShell commands if the commands are functionally equivalent.
- Understand that I am still learning computer science, and programming.

## Files and Folders
- Only create folders when necessary; keep the number of folders to a minimum.
- Use subfolders sparingly and only as needed.
- Avoid special characters and spaces in names.
- File and folder names should describe their function.
- Use snake_case naming convention when possible

## General Workflow
- Read and understand the file and linked files before editing.
- Confirm you are operating in the correct directory before making changes.
- Use paths relative to the workspace root for all file operations.
- Gather and validate context using tools like `codebase_search`, `grep_search`, or terminal commands before making changes.
- Do not alter code without full understanding of its structure, dependencies, and purpose.
- Prefer existing solutions over new ones; use `codebase_search` or `grep_search` to find reusable code.
- Minimize redundancy; promote consistency and maintainability.
- Make only minimal, validated edits unless broader changes are approved.
- Include info useful for debugging in the program output.
- If vulnerabilities appear in the terminal, run `npm audit` before proceeding.
- Build only what is necessary.

## Comments
- Write detailed, up-to-date comments.
- Use inline comments (e.g., `# Node.js dependencies`) and line-level comments (e.g., `.env  # Main environment file`) to clarify intent.
- Label sections of code with comments (e.g., `---> Main Content Section <---`).
- For HTML, use `<!-- Your comment here -->`.
- For CSS, use section comments as described in CSS Authoring Rules.

## CSS
- Group and document sections clearly with section comments (e.g., /* =============================== */).
- Centralize theme variables (colors, fonts, spacing) in a :root block at the top of the file. Reference variables throughout using var(--variable-name).
- Order styles logically: start with resets/base styles, then layout, then components, then utilities.
- Use descriptive, consistent naming (kebab-case for classes/variables).
- Add concise comments for each section and any non-obvious rules. Update comments if code changes.
- Always use CSS variables for colors, fonts, and repeated values. Avoid hardcoding unless necessary.
- Keep selectors simple and specific. Prefer class/element selectors over IDs or deep nesting.
- Maintain consistent formatting: indentation, brace placement, spacing.
- Minimize overrides and avoid !important unless absolutely necessary.
- Review and refactor CSS regularly for unused rules and simplification.

## Tool Usage
- Use the right tool for the task:
    - `codebase_search` for semantic/conceptual lookups
    - `grep_search` for exact string matches
    - `tree /F /A` for structural discovery
- Use previous tool outputs efficiently; avoid redundant searches or commands.
- Clearly report failures (missing files, invalid paths, permission issues) with actionable next steps.

## Examples
Example section structure:
```css
/* =============================== */
/* Theme Variables                 */
/* =============================== */

:root { ... }

/* =============================== */
/* Base Styles                     */
/* =============================== */

body { ... }
p { ... }
h1, h2, h3 { ... }

/* =============================== */
/* Component Styles                */
/* =============================== */

.button-primary { ... }

/* =============================== */
/* Utility Classes                 */
/* =============================== */

.text-center { ... }
```
## Validation and Response Protocols

### Validation and Response Principles
- Address user requests directly
- Validate context before making changes
- Never commit changes without explicit user approval
- Scale validation depth to task complexity

### File Operations
- All paths must be relative to workspace root
- Validate directory structure before file operations
- Report failures with specific details and next steps

### Code Changes
- Make minimal, validated edits unless approved otherwise
- Prefer existing solutions over new ones
- Cross-check documentation against actual code
- Review dependencies before changes

## Error Handling Standards

### Core Principles
- Use try-catch for operations that might fails
- Log errors with context (message, stack, timestamp)
- Provide user-friendly messages
- Never expose sensitive information

### Error Types & Responses
```javascript
// Error Response Format
{
    "error": {
        "code": "ERROR_CODE",
        "message": "User-friendly message",
        "details": { "field": "Additional info" }
    }
}

// Error Logging Example
try {
    // Operation
} catch (error) {
    logger.error({
        message: 'Operation failed',
        error: error.message,
        stack: error.stack,
        context: { operation: 'name', timestamp: new Date().toISOString() }
    });
    throw new CustomError('User message', error);
}

```