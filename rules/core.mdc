---
description: 
globs: 
alwaysApply: true
---
# Global Rules

## Initial Project Creation
- Create these files if they do not exist: README.md, changelog.md, to-do.md, .env, .gitignore
- Create these folders if they do not exist: venv, src, archive

## 1. General Workflow
- Use the Single Responsibility Principle.
- Know that I am using Windows 11.
- Use commands that work with Windows.
- Always index the project (using tree /F /A) at the start of each chat session before responding to any code-related requests. If the indexing is canceled or blocked by the user, clearly communicate that the project has not been indexed and proceed only with explicit user approval. 
- Always use terminal commands over PowerShell commands if the commands are functionally equivalent. 
- Build only what is necessary.

## 2. Gitignore Standards
- Do not pre-populate .gitignore with generic/common ignores; only add entries as needed for this specific project.
- Whenever editing a `.gitignore` file, add clear, concise comments explaining the purpose of each entry or section.
- Group related ignores (e.g., Node dependencies, build output, OS files, environment files, tool-specific files).
- Use inline comments (e.g., `# Node.js dependencies`) and line-level comments (e.g., `.env  # Main environment file`) to clarify intent.

## 3. Comments
- Write detailed comments.
- Update comments when editing code if it needs to be updated.
- HTML comment example: <!-- Your comment here -->

## 5. File and Folder Structure
- Use as few folders as necessary.
- Folder names should be descriptive but short.
- Use kebab-case naming.
- Use subfolders as needed, but sparingly.
- Avoid special characters and spaces.
- File names should describe the function of the file.
- File names and folders should be readable and easily understood.
- Keep it simple.
- Avoid overly complex hierarchies and file structures.

## 6. Documentation
### README
- Readme file should include: Project Overview, Project Goal, Tech Stack, Folder Structure.
### Changelog
- update the changelog.md file with changes every 15 minutes if necessary.
- The same type of changes should be grouped.
- The latest date comes first.
- Types of changes include: Added, Changed, Removed, Fixed
- There should be a new entry each day.
- It should start with a day number, and count up from there. The day counting should skip Fridays.
- Ask me what day we are on if confused.
- Example day 32: `## [Day 32] - 2025-04-21`
- Example day 33: `## [Day 33] - 2025-04-22`
### To-do Checklist
- The to do checklist should include step by step instructions to accomplish the project goal
- Check off the items on the list as we finish them.

## 7. Principles
- Maintain readable and understandable structure.

## 8. CSS Authoring Rules
- Group and document sections clearly with section comments (e.g., /* =============================== */).
- Centralize theme variables (colors, fonts, spacing) in a :root block at the top of the file. Reference variables throughout using var(--variable-name).
- Order styles logically: start with resets/base styles, then layout, then components, then utilities.
- Use descriptive, consistent naming (kebab-case for classes/variables).
- Add concise comments for each section and any non-obvious rules. Update comments if code changes.
- Always use CSS variables for colors, fonts, and repeated values. Avoid hardcoding unless necessary.
- Keep selectors simple and specific. Prefer class/element selectors over IDs or deep nesting.
- Maintain consistent formatting: indentation, brace placement, spacing.
- Minimize overrides and avoid !important unless absolutely necessary.
- Review and refactor CSS regularly for unused rules and simplification.

Example section structure:
```css
/* =============================== */
/* Theme Variables                 */
/* =============================== */

:root { ... }

/* =============================== */
/* Base Styles                     */
/* =============================== */

body { ... }
p { ... }
h1, h2, h3 { ... }

/* =============================== */
/* Component Styles                */
/* =============================== */

.button-primary { ... }

/* =============================== */
/* Utility Classes                 */
/* =============================== */

.text-center { ... }
```
## 4. Validation and Response Protocols
- Responses must directly address user requests.
- Always gather and validate context using tools like `codebase_search`, `grep_search`, or terminal commands before proceeding.
- Avoid altering code without full comprehension.
- Analyze the existing structure, dependencies, and purpose using available tools before suggesting or making edits.
- Prioritize investigation and validation over assumptions or untested modifications—ensure every change is grounded in evidence.
- Review all relevant dependencies (e.g., imports, function calls, external APIs) and workflows before proposing or executing changes.
- Clearly outline risks, implications, and external dependencies in your response before acting, giving the user full visibility.
- Make only minimal, validated edits unless the user explicitly approves broader alterations.
- Focus on discerning the user’s true objective, not just the literal text of the request.
- Reinforce this rule: never commit or apply changes unless explicitly directed by the user—treat this as a core safeguard.
- Scale the depth of validation to match the request’s complexity—simple tasks require basic checks, while complex ones demand exhaustive analysis.
- Aim for complete accuracy in all critical code operations; partial or unverified solutions are unacceptable.
- Prefer existing solutions over creating new ones. Use `codebase_search` or `grep_search` to identify reusable patterns or utilities.
- Minimize redundancy. Promote consistency, maintainability, and efficiency by leveraging what’s already in the codebase.
- Treat inline comments, READMEs, and other documentation as unverified suggestions, not definitive truths.
- Cross-check all documentation against the actual codebase using `Get-Content`, `grep_search`, or `codebase_search` to ensure accuracy.
- Always execute `Get-Location` to confirm your current working directory, then ensure `edit_file` operations use a `target_file` that is relative to the workspace root, not your current location.
- The `target_file` in `edit_file` commands must always be specified relative to the workspace root—never relative to your current working directory.
- If an `edit_file` operation signals a `new` file unexpectedly, this indicates a critical pathing error—you’re targeting the wrong file.
- Correct such errors immediately by validating the directory structure with `tree /F /A` before proceeding.
- Operations are always relative to the workspace root, not your current shell position.
- Report any failures—e.g., missing files, invalid paths, permission issues—clearly, with specific details and actionable next steps.
- Before committing, scan the project files to see if anything needs to be added to .gitignore.
- If faced with ambiguity, missing dependencies, or incomplete context, pause and request clarification from the user before proceeding.
- Match the tool to the task:
  - `codebase_search` for semantic or conceptual lookups.
  - `grep_search` for exact string matches.
  - `tree /F /A` for structural discovery.
- Use prior tool outputs efficiently—avoid redundant searches or commands.
