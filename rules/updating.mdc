---
description: Use when user types "upd"
globs:
alwaysApply: false
---

# Document Updating Rules

- Do not ask me if I want to proceed, just do it. Do not stop until these files are all updated.
  Update (or create if they are missing) the following files using the rules within this document:

- Don't use italics or bold formatting.

- IMPORTANT EXCLUSION RULE: When updating any of these files, completely ignore the `.cursor` folder and `.archive` folder and all their contents. The `.cursor` folder contains IDE-specific configuration, rules, and settings, while the `.archive` folder contains archived/backup files. Neither folder is part of the actual project functionality and should never be documented in project files, changelogs, or specifications.

- README.md
- CHANGELOG.md
- PROJECT_MAP.md
- .gitignore
- SPEC.md
- TODO.md

### README.md

Readme file should include:

- Project Overview
  - Overview of the project. Only update the project overview if necessary.
  - No more than 50 words
- Project Goal
  - Project goal. Only update the project goal if necessary.
  - No more than 50 words

Use the following structure for the README:

```markdown
# Project Name

## Project Overview

Brief description

## Project Goal

Brief purpose
```

### CHANGELOG.md

Strict Formatting and Date Rules:

1. Always use the exact output from the date command as the entry header, including the correct year, month, day, and weekday. Do not use a hardcoded or example date.
   - Example: If today is June 27, 2025 (Friday), the header must be:
     `## 2025-06-27 - Friday`
2. There should only be one `# Changelog` header at the very top of the file. Do not repeat this header for each entry.
3. Each day's entry must include all four change types (Added, Changed, Fixed, Removed) in this order, even if some are blank.

   - Example:

     ```
     ## 2025-06-27 - Friday

     [Added]
     - description of something that was added
     [Changed]
     - description of something that was changed
     [Fixed]
     - description of something that was fixed
     [Removed]
     - description of something that was removed
     ```

4. Use `[Added]`, `[Changed]`, `[Fixed]`, `[Removed]` format with square brackets. Each section can have multiple bullet points describing the changes.
5. Never use example dates in the actual changelog. Always use the current date.
6. New entries must always be added at the top, so the most recent day is first (reverse chronological order).
7. No extra blank lines between entries, except a single blank line between each day's entry.
8. If nothing was done for a change type on that day, leave the line blank (e.g., '[Added]' with no bullet points below).

#### How to obtain the date:

Step 1: Run the date command

- Windows PowerShell (Primary): `(Get-Date).ToString("yyyy-MM-dd - dddd")`
- Windows PowerShell (Alternative): `Get-Date -Format "yyyy-MM-dd - dddd"`
- Linux/macOS: `date '+%Y-%m-%d - %A'`

Step 2: Extract the date from terminal output

- Look for a line that matches the pattern: `YYYY-MM-DD - DayName`
- Example: If you see `2025-06-15 - Sunday` in the output, use exactly that
- Ignore any command text, line breaks, or extra formatting around the date
- The date line should be the actual result, not the command itself

Step 3: Validate the extracted date

- Verify the format is exactly: `YYYY-MM-DD - DayName`
- Verify it's a real date (not an example from these instructions)
- If the date looks wrong or corrupted, re-run the command

Step 4: Use the exact extracted date

- Use the EXACT text from the terminal output
- Do NOT modify, assume, or substitute any part of the date
- Do NOT use hardcoded dates or dates from these instruction examples

Troubleshooting:

- If terminal output is messy: Re-run the command until you get clean output
- If command fails: Try the alternative PowerShell command
- If still having issues: Run the command multiple times and use the clearest result

#### Example of correct changelog format:

```
# Changelog

## 2025-06-27 - Friday

[Added]
- New features
- Another new feature
[Changed]
- Updates
[Fixed]
- Bug Fixes
[Removed]
- Removed file.txt

## 2025-06-26 - Thursday

[Added]
[Changed]
[Fixed]
[Removed]
```

### .gitignore

- Only add entries as needed for this specific project; do not pre-populate with generic/common ignores.
- Group related ignores (e.g., Node dependencies, build output, OS files, environment files, tool-specific files).
- Add clear, concise comments explaining the purpose of each entry or section.
- Regularly review `.gitignore` to ensure no unwanted files are committed.
- Add the following to .gitignore and make sure they stay at the top:
- `**/.cursor/**`
- `**/archive/**`
- `**/.env`
- Only add files below the `# <--- AI Content Boundary` line

Use the following structure for the .gitignore file:

```
# All .cursor folders and all files within
**/.cursor/**

# All archive folders and all files within
**/archive/**

# All environment variable files
**/.env
**/.env.*

# <--- AI Content Boundary
# <--- AI model has written all content below this line
```

### PROJECT_MAP.md

- Always begin by running `tree /F /A` at the project root to obtain the current directory and file structure.
- Use the output of `tree /F /A` to verify and update the directory tree section in PROJECT_MAP.md.
- Update PROJECT_MAP.md whenever you add, remove, rename, or move a folder or significant file in the project.
- Keep all folder and file descriptions accurate and up to date.
- Clearly note if a folder is a submodule, external dependency, or has a special role.
- Remove or update entries for deleted or archived folders/files.
- Maintain consistent Markdown formatting and style throughout the document.
- Ensure the directory tree and descriptions match the actual project structure.
- After major reorganizations or refactors, review the entire document for accuracy.
- Commit changes to PROJECT_MAP.md alongside the relevant structural changes in the codebase.
- Write descriptions with enough detail for new contributors to understand the structure.

Use the following structure for the PROJECT_MAP.md file:

```
# Project Map

## Directory Structure

. (project root)
|   .gitignore
|   CHANGELOG.md
|   PROJECT_MAP.md
|   README.md
|
+---src
|   +---components
|   +---utils
+---docs
+---archive
```

### SPEC.md

- Technical specification document that outlines the complete project requirements and architecture.
- Only update if there are significant changes to project scope, requirements, or technical architecture.
- Maintain consistency with the implementation phases and technical stack decisions.
- Keep the file structure and formatting consistent with the original specification format.

Use the following structure for the SPEC.md file:

```
# Project Name - Technical Specification

## Project Overview

Brief description of the project

## Technical Stack

- Language and framework details
- Core libraries and dependencies
- Target platform information

## Functional Requirements

- Core functionality requirements
- User interface requirements
- Integration requirements

## Technical Architecture

- Application structure
- Data models
- Implementation phases

## Success Criteria

- Performance targets
- Quality metrics
- Testing requirements
```

### TODO.md

- Development to-do list organized by implementation phases.
- Update task completion status by checking off completed items.
- Add new tasks as they are identified during development.
- Maintain the phase-based organization structure.
- Update progress notes and priorities as needed.

Use the following structure for the TODO.md file:

```
# Project Name - Development To-Do List

## Phase 1: [Project-Specific Phase Name]

- [ ] Task description
- [ ] Another task description

## Phase 2: [Project-Specific Phase Name]

- [ ] Core feature task
- [ ] Additional core task

## Technical Infrastructure

- [ ] Setup task
- [ ] Configuration task

## Testing & Quality Assurance

- [ ] Testing task
- [ ] Quality task

## Notes

- Important development notes
- Priority guidelines
```

## Folder & File Descriptions

- **src/**: Main source code directory.
  - **components/**: Reusable components or modules.
  - **utils/**: Utility functions and helpers.
- **docs/**: Project documentation.
- **archive/**: Archived and backup files.
- **README.md**: Project overview and instructions.
- **CHANGELOG.md**: Project changelog.
- **.gitignore**: Git ignore rules for the project.
- **PROJECT_MAP.md**: This file; describes the project structure.
- **SPEC.md**: Technical specification document outlining project requirements, architecture, and implementation phases.
- **TODO.md**: Development to-do list organized by implementation phases with checkboxes for tracking progress.
