---
description: Use when writing comments
globs: 
alwaysApply: false
---
# Commenting Guidelines

- Use clear and concise language
- Avoid stating the obvious (e.g., don't just restate what the code does)
- Focus on the "why" and "how" rather than just the "what"
- Do not use inline comments.
- Use single-line comments for brief explanations
- Use multi-line comments for longer explanations or function/class descriptions
- Limit comments to 72 characters per line. Use multi-line comments if more space is needed.

## AutoHotkey (.ahk)

The guidelines within this header are for the autohotkey language.

### Single-line Comments

```autohotkey
; This is a single comment and it does not exceed 72 characters.
; ----------------------------------------------------------------------
```

### Multi-line Comments

```autohotkey
; ----------------------------------------------------------------------
; This is an example of a multi-line comment.
; This is the second line of a multi-line comment.
; The third line of a multi-line comment. And there can be more lines.
; ----------------------------------------------------------------------
```

### Function Documentation

```autohotkey
; ----------------------------------------------------------------------
; Enhanced file search function with clipboard integration and timing
; controls.
; 
; This function provides improved search functionality that can operate
; in two modes:
; - "find": Opens find dialog and pastes clipboard content with
;   auto-repeat
; - "extension": Opens address bar and handles URL/extension input
;   with timing
; 
; Parameters:
; - option: Search mode ("find" or "extension"). Default: "find"
; 
; Examples:
; ; Basic find with clipboard paste
; betterFind()
; 
; ; Extension mode for browser address bar
; betterFind("extension")
; 
; Dependencies:
; - Requires clipboard content for "find" mode
; - Assumes browser context for "extension" mode
; 
; Behavior:
; - Hold hotkey >200ms in find mode: auto-repeats Enter key
; - Hold hotkey >100ms in extension mode: types "https" instead of
;   clipboard
; 
; Author: YourName
; Version: 1.2
; Date: 2024-01-15
; ----------------------------------------------------------------------
betterFind(option := "find") {
    ; Function implementation here
}
```

## HTML (.html)

### Document Structure Comments
```html
<!-- 
    Main Navigation Section
    Contains primary navigation links and search functionality
-->
<nav class="main-nav">
    <!-- Search form with autocomplete -->
    <form class="search-form">
        <!-- ... existing code ... -->
    </form>
</nav>
```

### Section Comments
```html
<!-- Header Section -->
<header>
    <!-- Logo and branding -->
    <div class="brand">
        <!-- ... existing code ... -->
    </div>
</header>

<!-- Main Content Area -->
<main>
    <!-- ... existing code ... -->
</main>
```

### Conditional Comments
```html
<!--[if IE 9]>
    <link rel="stylesheet" href="ie9-specific.css">
<![endif]-->

<!--[if !IE]><!-->
    <link rel="stylesheet" href="modern-browsers.css">
<!--<![endif]-->
```

---

## CSS (.css)

### Section Headers

```css
/* Colors
   ---------------------------------------------------------------------- */

:root {
    --color-primary: #2566eb;
    --color-secondary: #602be3;
    --color-accent: #979372;
}

/* Typography
   ---------------------------------------------------------------------- */
```

### Property Explanations
```css
.element {
    /* Using flexbox for vertical centering */
    display: flex;
    align-items: center;
    
    /* Prevent text wrapping and add ellipsis */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
```

### Media Query Comments
```css
/* Base styles for all devices */
.element {
    width: 100%;
}

/* Tablet and larger devices */
@media screen and (min-width: 768px) {
    .element {
        width: 50%;
    }
}

/* Desktop devices */
@media screen and (min-width: 1024px) {
    .element {
        width: 33.33%;
    }
}
```

### TODO/FIXME Comments
```css
/* ----------------------------------------------------------------------
TODO: Don't forget to change this!
---------------------------------------------------------------------- /*
.body {
    display: flex;
}

/* ----------------------------------------------------------------------
FIXME: This causes layout shift on mobile devices
---------------------------------------------------------------------- */
.element {
    display: flex;
}
```

---

## Python (.py)

### Module/File Headers
```python
"""
Data Processing Module

This module provides functions for processing and analyzing data from 
various sources. It includes utilities for data cleaning, 
transformation, and basic statistical analysis.

Author: John Doe
Date: 2024-03-20
Version: 1.0.0
"""
```

### Function Docstrings
```python
def process_data(data: list, threshold: float = 0.5) -> dict:
    """
    Process and analyze the input data based on specified parameters.
    
    Args:
        data (list): List of data points to process
        threshold (float, optional): Minimum value threshold. 
            Defaults to 0.5.
    
    Returns:
        dict: Processed results containing statistics and filtered 
            data
    
    Raises:
        ValueError: If data is empty or threshold is negative
    """
    pass
```

### Class Docstrings
```python
class DataProcessor:
    """
    A class for processing and analyzing data sets.
    
    This class provides methods for data cleaning, transformation, and 
    statistical analysis. It supports various data formats and includes 
    validation checks.
    
    Attributes:
        data (list): The processed data set
        stats (dict): Statistical measures of the data
    """
    
    def __init__(self, data: list):
        """
        Initialize the DataProcessor with input data.
        
        Args:
            data (list): Raw data to be processed
        """
        self.data = data
        self.stats = {}
```

### Inline Comments
```python
# Initialize the data structure with default values
data = {
    # Tracks total number of items
    'count': 0,
    # Running sum for average calculation
    'sum': 0,
    # List to store processed items
    'items': []
}

# Process each item in the input list
for item in input_list:
    # Skip invalid or empty items
    if not item or not isinstance(item, (int, float)):
        continue
    
    # Update statistics
    data['count'] += 1
    data['sum'] += item
    data['items'].append(item)
```

### Type Hints with Comments
```python
from typing import List, Dict, Optional, Union

# Type alias for better readability
DataPoint = Union[int, float]

def analyze_data(
    # List of numeric values to analyze
    values: List[DataPoint],
    # Optional configuration
    options: Optional[Dict[str, bool]] = None
) -> Dict[str, float]:
    """
    Analyze a list of numeric values and return statistics.
    """
    pass
```

---

## Best Practices Summary

### DO:
- Write comments that explain the "why" behind complex logic
- Keep comments up-to-date with code changes
- Use consistent comment formatting within each language
- Document public APIs and interfaces thoroughly
- Include examples in documentation when helpful
- Use TODO/FIXME comments sparingly and include ticket numbers
- Comment complex algorithms with step-by-step explanations
- Document assumptions and edge cases

### DON'T:
- Comment obvious code that is self-explanatory
- Leave commented-out code in production
- Use comments as a substitute for clear code
- Write comments that contradict the code
- Use inconsistent comment styles
- Write comments that are longer than the code they explain
- Use comments to explain bad code instead of fixing it
- Leave TODO comments without a plan to address them

### Code Review Checklist:
- [ ] Comments follow the language-specific style guide
- [ ] All public APIs and interfaces are documented
- [ ] Complex logic is explained with clear comments
- [ ] Comments are up-to-date with the code
- [ ] Documentation includes examples where helpful
- [ ] Edge cases and assumptions are documented
- [ ] Comments are concise and add value
- [ ] No redundant or obvious comments